/**
 * üìñ IMPERIUM - Syst√®me de Storyline Contextuelle
 * G√®re les √©v√©nements narratifs bas√©s sur les actions du joueur
 */

class ContextualStorylineSystem {
    constructor() {
        this.currentChapter = 1;
        this.storyEvents = this.initStoryEvents();
        this.playerActions = new Set();
        this.triggeredEvents = new Set();
        this.storyState = this.loadStoryState();
    }

    initStoryEvents() {
        return {
            // √âv√©nements du Chapitre 1 - Les Premiers Pas
            chapter1: {
                'first_building': {
                    trigger: 'building_constructed',
                    condition: (data) => data.buildingType === 'forum',
                    story: {
                        title: 'Les Fondations de l\'Empire',
                        content: `
                            <div class="story-event">
                                <h3>üèõÔ∏è Le Premier Forum</h3>
                                <p>Excellent travail, Gouverneur ! Votre premier Forum s'√©l√®ve fi√®rement au centre de votre cit√©. 
                                Les citoyens se rassemblent d√©j√† autour de cette merveille architecturale.</p>
                                
                                <div class="story-dialogue">
                                    <div class="character-speak">
                                        <strong>Marcus Flavius (Architecte en Chef) :</strong><br>
                                        "Gouverneur, ce Forum rivalise avec ceux de Rome ! Les colonnes de marbre que nous avons 
                                        utilis√©es impressionneront m√™me les s√©nateurs de la capitale."
                                    </div>
                                </div>
                                
                                <p>Votre r√©putation grandit. Les nouvelles de votre comp√©tence administrative 
                                commencent √† se r√©pandre dans les provinces voisines.</p>
                                
                                <div class="story-impact">
                                    <strong>Impact :</strong> +50 R√©putation, +25 Population maximale
                                </div>
                            </div>
                        `,
                        rewards: {
                            reputation: 50,
                            populationMax: 25
                        }
                    }
                },
                'population_growth': {
                    trigger: 'population_milestone',
                    condition: (data) => data.population >= 200,
                    story: {
                        title: 'Une Cit√© qui Grandit',
                        content: `
                            <div class="story-event">
                                <h3>üë• L'Afflux de Nouveaux Citoyens</h3>
                                <p>Votre cit√© attire de plus en plus de colons ! Des familles enti√®res arrivent 
                                chaque jour, attir√©es par la prosp√©rit√© et la s√©curit√© que vous offrez.</p>
                                
                                <div class="story-dialogue">
                                    <div class="character-speak">
                                        <strong>Lucius Maximus (Censeur) :</strong><br>
                                        "Gouverneur, nous avons d√©pass√© les 200 citoyens ! Des artisans, des marchands, 
                                        m√™me quelques nobles mineurs s'installent dans notre cit√©. C'est un succ√®s remarquable !"
                                    </div>
                                </div>
                                
                                <p>Avec cette croissance vient de nouveaux d√©fis : il faudra bient√¥t penser √† 
                                l'approvisionnement en eau, aux routes, et √† la s√©curit√©.</p>
                                
                                <div class="story-choice">
                                    <p><strong>Comment r√©agissez-vous ?</strong></p>
                                    <button onclick="contextualStory.makeChoice('expand_infrastructure')">
                                        D√©velopper les infrastructures
                                    </button>
                                    <button onclick="contextualStory.makeChoice('focus_military')">
                                        Renforcer la s√©curit√©
                                    </button>
                                </div>
                            </div>
                        `
                    }
                },
                'first_military': {
                    trigger: 'unit_recruited',
                    condition: (data) => data.unitType === 'velites' && data.isFirst,
                    story: {
                        title: 'Les Premi√®res L√©gions',
                        content: `
                            <div class="story-event">
                                <h3>‚öîÔ∏è Naissance d'une Arm√©e</h3>
                                <p>Vos premiers soldats ont termin√© leur entra√Ænement ! Ces jeunes V√©lites, 
                                arm√©s de javelots et de boucliers l√©gers, repr√©sentent l'embryon de votre future l√©gion.</p>
                                
                                <div class="story-dialogue">
                                    <div class="character-speak">
                                        <strong>Centurion Gaius Brutus :</strong><br>
                                        "Gouverneur, ces hommes sont pr√™ts √† mourir pour Rome et pour vous ! 
                                        Ils ne sont peut-√™tre que des V√©lites, mais leur courage vaut celui des Hastati."
                                    </div>
                                </div>
                                
                                <p>Avec une force militaire, m√™me modeste, votre cit√© peut maintenant se d√©fendre 
                                et envisager d'√©tendre son influence.</p>
                                
                                <div class="story-impact">
                                    <strong>Impact :</strong> +30 S√©curit√©, D√©blocage des missions militaires
                                </div>
                            </div>
                        `,
                        rewards: {
                            security: 30,
                            unlocks: ['military_missions']
                        }
                    }
                }
            },
            
            // √âv√©nements du Chapitre 2 - L'Expansion
            chapter2: {
                'trade_route': {
                    trigger: 'trade_established',
                    condition: (data) => data.routeType === 'commercial',
                    story: {
                        title: 'Les Routes du Commerce',
                        content: `
                            <div class="story-event">
                                <h3>üõ£Ô∏è Ouverture des March√©s</h3>
                                <p>Votre premi√®re route commerciale est √©tablie ! Les marchands affluent, 
                                apportant des biens exotiques et de nouvelles opportunit√©s.</p>
                                
                                <div class="story-dialogue">
                                    <div class="character-speak">
                                        <strong>Marcus Mercator (Ma√Ætre des Guildes) :</strong><br>
                                        "Gouverneur, les caravanes arrivent d√©j√† ! Soie de Chine, √©pices d'Orient, 
                                        ambre du Nord... Notre cit√© devient un carrefour commercial !"
                                    </div>
                                </div>
                                
                                <p>Cette prosp√©rit√© √©conomique attire l'attention... et parfois la convoitise.</p>
                            </div>
                        `
                    }
                },
                'barbarian_threat': {
                    trigger: 'threat_detected',
                    condition: (data) => data.threatType === 'barbarian_raid',
                    story: {
                        title: 'Menace Barbare',
                        content: `
                            <div class="story-event">
                                <h3>‚ö° Nuages √† l'Horizon</h3>
                                <p>Vos √©claireurs rapportent des mouvements suspects aux fronti√®res. 
                                Des tribus barbares semblent s'organiser...</p>
                                
                                <div class="story-dialogue">
                                    <div class="character-speak">
                                        <strong>Centurion Gaius Brutus :</strong><br>
                                        "Gouverneur, nos espions confirment : une coalition de tribus germaniques 
                                        se forme. Ils convoitent nos richesses. Nous devons nous pr√©parer !"
                                    </div>
                                </div>
                                
                                <div class="story-choice">
                                    <p><strong>Quelle est votre strat√©gie ?</strong></p>
                                    <button onclick="contextualStory.makeChoice('diplomatic_solution')">
                                        Tenter la diplomatie
                                    </button>
                                    <button onclick="contextualStory.makeChoice('military_preparation')">
                                        Pr√©parer la guerre
                                    </button>
                                    <button onclick="contextualStory.makeChoice('fortify_city')">
                                        Fortifier la cit√©
                                    </button>
                                </div>
                            </div>
                        `
                    }
                }
            },
            
            // √âv√©nements sp√©ciaux et al√©atoires
            special: {
                'imperial_visit': {
                    trigger: 'random_event',
                    condition: (data) => data.playerLevel >= 5 && Math.random() < 0.1,
                    story: {
                        title: 'Visite Imp√©riale',
                        content: `
                            <div class="story-event">
                                <h3>üëë L'Empereur en Personne !</h3>
                                <p>Incroyable ! Un messager imp√©rial annonce la visite prochaine de l'Empereur Auguste 
                                en personne dans votre cit√© !</p>
                                
                                <div class="story-dialogue">
                                    <div class="character-speak">
                                        <strong>Messager Imp√©rial :</strong><br>
                                        "Par ordre de Sa Majest√© Auguste, Empereur de Rome, P√®re de la Patrie : 
                                        Sa Majest√© honorera votre cit√© de sa pr√©sence dans trois jours. 
                                        Pr√©parez-vous dignement !"
                                    </div>
                                </div>
                                
                                <p>C'est l'honneur supr√™me ! Mais aussi une pression √©norme. 
                                L'Empereur jugera votre travail...</p>
                                
                                <div class="story-impact">
                                    <strong>Pr√©paratifs n√©cessaires :</strong> Organiser des festivit√©s, 
                                    am√©liorer l'apparence de la cit√©, pr√©parer des cadeaux
                                </div>
                            </div>
                        `
                    }
                },
                'natural_disaster': {
                    trigger: 'random_event',
                    condition: (data) => Math.random() < 0.05,
                    story: {
                        title: 'Col√®re des Dieux',
                        content: `
                            <div class="story-event">
                                <h3>üå™Ô∏è Catastrophe Naturelle</h3>
                                <p>Les dieux semblent en col√®re ! Un tremblement de terre a secou√© votre cit√©, 
                                causant des d√©g√¢ts aux b√¢timents et semant la panique parmi la population.</p>
                                
                                <div class="story-dialogue">
                                    <div class="character-speak">
                                        <strong>Grand Pr√™tre Lucius Pius :</strong><br>
                                        "Gouverneur, nous devons apaiser les dieux ! Peut-√™tre avons-nous n√©glig√© 
                                        les sacrifices ou offens√© une divinit√©. Il faut agir vite !"
                                    </div>
                                </div>
                                
                                <div class="story-choice">
                                    <p><strong>Comment r√©agissez-vous ?</strong></p>
                                    <button onclick="contextualStory.makeChoice('religious_ceremony')">
                                        Organiser des c√©r√©monies religieuses
                                    </button>
                                    <button onclick="contextualStory.makeChoice('rebuild_quickly')">
                                        Se concentrer sur la reconstruction
                                    </button>
                                    <button onclick="contextualStory.makeChoice('help_citizens')">
                                        Aider directement les citoyens
                                    </button>
                                </div>
                            </div>
                        `
                    }
                }
            }
        };
    }

    loadStoryState() {
        const saved = localStorage.getItem('imperium_story_state');
        return saved ? JSON.parse(saved) : {
            currentChapter: 1,
            playerChoices: {},
            characterRelationships: {},
            reputation: 0,
            storyFlags: {}
        };
    }

    saveStoryState() {
        localStorage.setItem('imperium_story_state', JSON.stringify(this.storyState));
    }

    triggerEvent(eventType, data = {}) {
        console.log(`üìñ √âv√©nement d√©clench√©: ${eventType}`, data);
        
        // Chercher les √©v√©nements correspondants
        const matchingEvents = this.findMatchingEvents(eventType, data);
        
        matchingEvents.forEach(event => {
            if (!this.triggeredEvents.has(event.id)) {
                this.showStoryEvent(event);
                this.triggeredEvents.add(event.id);
            }
        });
    }

    findMatchingEvents(eventType, data) {
        const matchingEvents = [];
        const chapterKey = `chapter${this.currentChapter}`;
        
        // V√©rifier les √©v√©nements du chapitre actuel
        if (this.storyEvents[chapterKey]) {
            Object.entries(this.storyEvents[chapterKey]).forEach(([eventId, event]) => {
                if (event.trigger === eventType && event.condition(data)) {
                    matchingEvents.push({ id: eventId, ...event });
                }
            });
        }
        
        // V√©rifier les √©v√©nements sp√©ciaux
        if (this.storyEvents.special) {
            Object.entries(this.storyEvents.special).forEach(([eventId, event]) => {
                if (event.trigger === eventType && event.condition(data)) {
                    matchingEvents.push({ id: eventId, ...event });
                }
            });
        }
        
        return matchingEvents;
    }

    showStoryEvent(event) {
        if (!window.dialogueSystem) return;
        
        console.log(`üìñ Affichage de l'√©v√©nement: ${event.story.title}`);
        
        window.dialogueSystem.showDialogue({
            title: event.story.title,
            content: event.story.content,
            buttons: event.story.choices ? [] : [
                {
                    text: 'Continuer',
                    action: () => {
                        if (event.story.rewards) {
                            this.applyRewards(event.story.rewards);
                        }
                    }
                }
            ]
        });
        
        // Jouer un son d'√©v√©nement si disponible
        this.playEventSound(event.story.soundEffect);
    }

    makeChoice(choiceId) {
        console.log(`üìñ Choix fait: ${choiceId}`);
        
        // Enregistrer le choix du joueur
        this.storyState.playerChoices[choiceId] = Date.now();
        
        // Appliquer les cons√©quences du choix
        this.applyChoiceConsequences(choiceId);
        
        // Fermer le dialogue
        if (window.dialogueSystem) {
            window.dialogueSystem.close();
        }
        
        this.saveStoryState();
    }

    applyChoiceConsequences(choiceId) {
        const consequences = {
            'expand_infrastructure': {
                message: 'Vous investissez dans les infrastructures. La population est ravie !',
                effects: { happiness: 20, populationGrowth: 1.5 }
            },
            'focus_military': {
                message: 'Vous renforcez la s√©curit√©. Les citoyens se sentent prot√©g√©s.',
                effects: { security: 30, militaryMorale: 15 }
            },
            'diplomatic_solution': {
                message: 'Vos √©missaires partent n√©gocier avec les barbares...',
                effects: { reputation: 25, diplomaticInfluence: 10 }
            },
            'military_preparation': {
                message: 'Vos l√©gions se pr√©parent au combat. L\'ennemi sera repouss√© !',
                effects: { militaryStrength: 40, citizenFear: 10 }
            },
            'fortify_city': {
                message: 'Les fortifications sont renforc√©es. Votre cit√© devient imprenable !',
                effects: { defense: 50, constructionCost: 200 }
            },
            'religious_ceremony': {
                message: 'Les c√©r√©monies apaisent les dieux et le peuple.',
                effects: { happiness: 30, religiousFavor: 20 }
            },
            'rebuild_quickly': {
                message: 'La reconstruction rapide impressionne les citoyens.',
                effects: { efficiency: 25, resources: -100 }
            },
            'help_citizens': {
                message: 'Votre compassion touche le c≈ìur de vos sujets.',
                effects: { loyalty: 40, personalReputation: 30 }
            }
        };
        
        const consequence = consequences[choiceId];
        if (consequence) {
            // Afficher le message
            if (window.addImperiumLog) {
                window.addImperiumLog(consequence.message, 'story');
            }
            
            // Appliquer les effets
            this.applyEffects(consequence.effects);
        }
    }

    applyEffects(effects) {
        Object.entries(effects).forEach(([effect, value]) => {
            switch (effect) {
                case 'happiness':
                    if (window.gameState && window.gameState.provinces[0]) {
                        window.gameState.provinces[0].happiness += value;
                    }
                    break;
                case 'reputation':
                    this.storyState.reputation += value;
                    break;
                case 'resources':
                    if (window.gameState) {
                        window.gameState.resources.gold = Math.max(0, 
                            (window.gameState.resources.gold || 0) + value);
                    }
                    break;
                // Ajouter d'autres effets selon les besoins
            }
        });
        
        this.saveStoryState();
    }

    applyRewards(rewards) {
        if (rewards.reputation) {
            this.storyState.reputation += rewards.reputation;
        }
        
        if (rewards.populationMax && window.gameState && window.gameState.provinces[0]) {
            window.gameState.provinces[0].populationMax += rewards.populationMax;
        }
        
        if (rewards.unlocks) {
            rewards.unlocks.forEach(unlock => {
                this.storyState.storyFlags[unlock] = true;
            });
        }
        
        this.saveStoryState();
        
        // Afficher les r√©compenses
        if (window.addImperiumLog) {
            window.addImperiumLog('R√©compenses d\'histoire re√ßues !', 'success');
        }
    }

    playEventSound(soundEffect) {
        if (!soundEffect) return;
        
        // Jouer un effet sonore si le syst√®me audio est disponible
        try {
            const audio = new Audio(`sounds/${soundEffect}.mp3`);
            audio.volume = 0.3;
            audio.play().catch(() => {
                // Ignorer les erreurs audio
            });
        } catch (e) {
            // Ignorer les erreurs audio
        }
    }

    // M√©thodes pour d√©clencher des √©v√©nements sp√©cifiques
    onBuildingConstructed(buildingType, isFirst = false) {
        this.triggerEvent('building_constructed', { buildingType, isFirst });
    }

    onPopulationMilestone(population) {
        this.triggerEvent('population_milestone', { population });
    }

    onUnitRecruited(unitType, isFirst = false) {
        this.triggerEvent('unit_recruited', { unitType, isFirst });
    }

    onTradeEstablished(routeType) {
        this.triggerEvent('trade_established', { routeType });
    }

    onThreatDetected(threatType) {
        this.triggerEvent('threat_detected', { threatType });
    }

    onRandomEvent() {
        const playerLevel = window.gameState?.player?.level || 1;
        this.triggerEvent('random_event', { playerLevel });
    }

    // Progression de chapitre
    advanceChapter() {
        this.currentChapter++;
        this.storyState.currentChapter = this.currentChapter;
        this.saveStoryState();
        
        console.log(`üìñ Progression vers le chapitre ${this.currentChapter}`);
        
        // Afficher l'introduction du nouveau chapitre
        if (window.cinematicSystem) {
            window.cinematicSystem.showChapterIntro(`chapter_${this.currentChapter}`);
        }
    }

    // Obtenir l'√©tat actuel de l'histoire
    getStoryState() {
        return { ...this.storyState };
    }

    // R√©initialiser l'histoire
    resetStory() {
        this.currentChapter = 1;
        this.storyState = {
            currentChapter: 1,
            playerChoices: {},
            characterRelationships: {},
            reputation: 0,
            storyFlags: {}
        };
        this.triggeredEvents.clear();
        this.saveStoryState();
        
        console.log('üìñ Histoire r√©initialis√©e');
    }
}

// Initialisation globale
window.contextualStory = new ContextualStorylineSystem();

// Int√©gration avec les syst√®mes existants
document.addEventListener('DOMContentLoaded', () => {
    // D√©clencher des √©v√©nements al√©atoires p√©riodiquement
    setInterval(() => {
        if (Math.random() < 0.02) { // 2% de chance toutes les minutes
            window.contextualStory.onRandomEvent();
        }
    }, 60000); // Chaque minute
    
    console.log('üìñ Syst√®me de storyline contextuelle initialis√©');
});

console.log('üìñ Syst√®me de storyline contextuelle charg√©');